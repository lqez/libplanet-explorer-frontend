{"version":3,"sources":["webpack:///./src/pages/account.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_misc_useQueryString__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","office_ui_fabric_react__WEBPACK_IMPORTED_MODULE_3__","office_ui_fabric_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_4__","office_ui_fabric_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_5__","office_ui_fabric_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_6__","_components_Wrapper__WEBPACK_IMPORTED_MODULE_7__","_generated_graphql__WEBPACK_IMPORTED_MODULE_8__","TransactionsList","_ref4","transactions","columns","key","name","fieldName","minWidth","maxWidth","isRowHeader","isResizable","isSorted","isSortedDescending","data","isPadded","onRender","_ref5","id","a","createElement","href","_ref6","signer","items","slice","selectionMode","SelectionMode","none","getKey","tx","setKey","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","onItemInvoked","_ref7","navigate","AccountPage","_ref","location","_useQueryString","useQueryString","queryString","variables","involvedAddress","_ref2","loading","error","transactionQuery","_transactions$reduce","reduce","acc","push","signedTransactions","involvedTransactions","numOfSigned","length","numOfInvolved","Fragment","useMemo","search","substr","useCallback","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent"],"mappings":"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","file":"component---src-pages-account-tsx-af8f8fd8696211ee4e1b.js","sourcesContent":["import React from 'react';\nimport useQueryString from '../misc/useQueryString';\nimport { navigate } from 'gatsby-link';\nimport { Link } from 'office-ui-fabric-react';\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from 'office-ui-fabric-react/lib/DetailsList';\nimport Wrapper from '../components/Wrapper';\nimport {\n  Transaction,\n  TransactionsByAccountComponent,\n} from '../generated/graphql';\n\ninterface AccountPageProps {\n  location: Location;\n}\n\nconst AccountPage: React.FC<AccountPageProps> = ({ location }) => {\n  const [queryString, setQueryString] = useQueryString(location);\n  return (\n    <Wrapper>\n      <h1>{`Account Details`}</h1>\n      <p>\n        Account Number: <b>{queryString}</b>\n      </p>\n\n      <TransactionsByAccountComponent\n        variables={{ involvedAddress: queryString }}>\n        {({ data, loading, error }) => {\n          if (loading) return <p>loading&hellip;</p>;\n          if (error) return <p>error!</p>;\n          const { transactions } = data!.transactionQuery!;\n          if (!transactions) {\n            return <p>There are no transactions.</p>;\n          }\n\n          const [\n            signedTransactions,\n            involvedTransactions,\n          ] = transactions.reduce(\n            (acc, tx) => {\n              if (tx.signer === queryString) {\n                acc[0].push(tx);\n              } else {\n                acc[1].push(tx);\n              }\n              return acc;\n            },\n            [[], []]\n          );\n\n          const numOfSigned = signedTransactions.length;\n          const numOfInvolved = involvedTransactions.length;\n\n          return (\n            <>\n              <h2>Signed Transactions: {numOfSigned}</h2>\n              {numOfSigned > 0 ? (\n                <TransactionsList\n                  transactions={\n                    loading\n                      ? []\n                      : (signedTransactions as NonNullable<Transaction[]>)\n                  }\n                />\n              ) : (\n                <div>No transactions of this type</div>\n              )}\n              <h2>Involved Transactions: {numOfInvolved}</h2>\n              {numOfInvolved ? (\n                <TransactionsList\n                  transactions={\n                    loading\n                      ? []\n                      : (involvedTransactions as NonNullable<Transaction[]>)\n                  }\n                />\n              ) : (\n                <div>No transactions of this type</div>\n              )}\n            </>\n          );\n        }}\n      </TransactionsByAccountComponent>\n    </Wrapper>\n  );\n};\n\ninterface TxListProps {\n  transactions: Pick<\n    Transaction,\n    'id' | 'nonce' | 'signature' | 'signer' | 'timestamp'\n  >[];\n}\n\nconst TransactionsList: React.FC<TxListProps> = ({ transactions }) => {\n  const columns: IColumn[] = [\n    {\n      key: 'coulmnNonce',\n      name: 'Nonce',\n      fieldName: 'nonce',\n      minWidth: 5,\n      maxWidth: 50,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'columnId',\n      name: 'ID',\n      fieldName: 'id',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n      // FIXME: We'd better to use absolute paths and make Gatsby automatically\n      // to rebase these absolute paths on the PATH_PREFIX configuration.\n      onRender: ({ id }) => <Link href={`../transaction/?${id}`}>{id}</Link>,\n    },\n    {\n      key: 'columnSignature',\n      name: 'Signature',\n      fieldName: 'signature',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n    },\n    {\n      key: 'columnSigner',\n      name: 'Signer',\n      fieldName: 'signer',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n      onRender: ({ signer }) => (\n        // FIXME: We'd better to use absolute paths and make Gatsby automatically\n        // to rebase these absolute paths on the PATH_PREFIX configuration.\n        <Link href={`./?${signer}`}>{signer}</Link>\n      ),\n    },\n    {\n      key: 'columnTimestamp',\n      name: 'Timestamp',\n      fieldName: 'timestamp',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n    },\n  ];\n\n  return (\n    <DetailsList\n      items={transactions.slice(0, -1)}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      getKey={tx => tx.id}\n      setKey=\"set\"\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      // FIXME: We'd better to use absolute paths and make Gatsby automatically\n      // to rebase these absolute paths on the PATH_PREFIX configuration.\n      onItemInvoked={({ id }) => navigate(`../transaction/?${id}`)}\n    />\n  );\n};\n\nexport default AccountPage;\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n   __typename?: 'Action',\n  arguments: Array<ActionArgumentType>,\n};\n\nexport type ActionArgumentType = {\n   __typename?: 'ActionArgumentType',\n  key: Scalars['String'],\n  value: Scalars['String'],\n};\n\n\nexport type Block = {\n   __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n   __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>\n};\n\n\n\n\n\n\n\nexport type Query = {\n   __typename?: 'Query',\n  blockQuery?: Maybe<BlockQuery>,\n  transactionQuery?: Maybe<TransactionQuery>,\n};\n\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  actions: Array<Action>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\n\nexport type TransactionQuery = {\n   __typename?: 'TransactionQuery',\n  transaction?: Maybe<Transaction>,\n  transactions: Array<Transaction>,\n};\n\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'> & { actions: Array<({ __typename?: 'Action' } & { arguments: Array<({ __typename?: 'ActionArgumentType' } & Pick<ActionArgumentType, 'key' | 'value'>)> })> });\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean']\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> })> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> })> });\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc: Scalars['Boolean'],\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type TransactionListQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress?: Maybe<Scalars['Address']>\n};\n\n\nexport type TransactionsByAccountQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  actions {\n    arguments {\n      key\n      value\n    }\n  }\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!) {\n  blockQuery {\n    blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs) {\n      ...BlockCommon\n      miner\n      transactions {\n        id\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  blockQuery {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($signer: Address, $involvedAddress: Address, $desc: Boolean!, $offset: Int!, $limit: Int!) {\n  transactionQuery {\n    transactions(signer: $signer, involvedAddress: $involvedAddress, desc: $desc, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionListQuery, TransactionListQueryVariables>, 'query'> & ({ variables: TransactionListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionListComponent = (props: TransactionListComponentProps) => (\n      <ApolloReactComponents.Query<TransactionListQuery, TransactionListQueryVariables> query={TransactionListDocument} {...props} />\n    );\n    \nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionListQuery, TransactionListQueryVariables> & TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionListQuery,\n  TransactionListQueryVariables,\n  TransactionListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionListQuery, TransactionListQueryVariables, TransactionListProps<TChildProps>>(TransactionListDocument, {\n      alias: 'withTransactionList',\n      ...operationOptions\n    });\n};\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<TransactionListQuery, TransactionListQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transactionQuery {\n    transaction(id: $id) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;\nexport const TransactionsByAccountDocument = gql`\n    query TransactionsByAccount($involvedAddress: Address) {\n  transactionQuery {\n    transactions(involvedAddress: $involvedAddress) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionsByAccountComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>, 'query'>;\n\n    export const TransactionsByAccountComponent = (props: TransactionsByAccountComponentProps) => (\n      <ApolloReactComponents.Query<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> query={TransactionsByAccountDocument} {...props} />\n    );\n    \nexport type TransactionsByAccountProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> & TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables,\n  TransactionsByAccountProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionsByAccountQuery, TransactionsByAccountQueryVariables, TransactionsByAccountProps<TChildProps>>(TransactionsByAccountDocument, {\n      alias: 'withTransactionsByAccount',\n      ...operationOptions\n    });\n};\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>;"],"sourceRoot":""}