{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/misc/useSearchParams.ts","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx"],"names":["BlockList","_ref3","blocks","columns","key","name","fieldName","iconName","isIconOnly","minWidth","maxWidth","isRowHeader","isResizable","isSorted","isSortedDescending","data","isPadded","onRender","_ref4","hash","react_default","a","createElement","Link","href","block","index","beforeBlock","Math","min","length","beforeTimestamp","Date","parse","timestamp","nowTimestamp","Fragment","_ref5","difficulty","_ref6","transactions","DetailsList","items","slice","selectionMode","SelectionMode","none","getKey","setKey","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","onItemInvoked","navigate","IndexPage","_ref","location","_useSearchParams","_useQueryString","useQueryString","queryString","setQueryString","querystring","searchParams","stringify","useSearchParams","setSearchParams","_searchParams$offset","offset","setOffset","newSearchParams","Object","assign","olderHandler","newerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","Wrapper","Checkbox","label","checked","onChange","_","graphql","variables","limit","pollInterval","_ref2","loading","error","timestamps","blockQuery","map","interval","i","difficulties","reduce","d","sum","DefaultButton","onClick","disabled","className","css","_templateObject","pages_BlockList","useMemo","search","substr","useCallback","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent"],"mappings":"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","file":"component---src-pages-index-tsx-16f9b877b9ecb203903a.js","sourcesContent":["import React, { useState } from 'react';\nimport { css } from 'emotion';\nimport { navigate } from 'gatsby';\nimport { Checkbox, DefaultButton, Link } from 'office-ui-fabric-react';\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from 'office-ui-fabric-react/lib/DetailsList';\nimport { Block, BlockListComponent } from '../generated/graphql';\nimport useSearchParams from '../misc/useSearchParams';\nimport Wrapper from '../components/Wrapper';\n\ninterface IndexPageProps {\n  location: Location;\n}\n\nconst POLL_INTERVAL = 2000;\n\nconst IndexPage: React.FC<IndexPageProps> = ({ location }) => {\n  const limit = 21;\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const { offset = 0 } = searchParams;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      const newSearchParams = { ...searchParams };\n      delete newSearchParams.offset;\n      setSearchParams(newSearchParams);\n    } else {\n      setSearchParams({ ...searchParams, offset });\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <Wrapper>\n      <Checkbox\n        label=\"Include blocks having any tx\"\n        checked={excludeEmptyTxs}\n        onChange={(_, checked) => {\n          setExcludeEmptyTxs(!!checked);\n        }}\n      />\n      <BlockListComponent\n        variables={{ offset, limit, excludeEmptyTxs }}\n        pollInterval={POLL_INTERVAL}>\n        {({ data, loading, error }) => {\n          if (error) return <p>error!</p>;\n\n          const timestamps: Date[] | null =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? data.blockQuery.blocks.map(block => new Date(block!.timestamp))\n              : null;\n\n          let interval: number | null = timestamps ? 0 : null;\n          if (interval != null && timestamps) {\n            for (let i = 0; i < timestamps.length - 1; i++) {\n              interval += +timestamps[i] - +timestamps[i + 1];\n            }\n            interval /= (timestamps.length - 1) * 1000;\n          }\n\n          const difficulties: number[] | null =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? data.blockQuery.blocks.map(block => block!.difficulty)\n              : null;\n          let difficulty = 0;\n          if (difficulty != null && difficulties) {\n            difficulty =\n              difficulties.reduce((d, sum) => d + sum, 0) / difficulties.length;\n          }\n          return (\n            <>\n              <p key=\"interval\">\n                Average interval in this page: {interval} sec\n              </p>\n              <p key=\"difficulty\">\n                Average difficulty in this page: {difficulty}\n              </p>\n              <DefaultButton\n                onClick={newerHandler}\n                disabled={loading || offset < 1}\n                className={css`\n                  margin-right: 5px;\n                `}>\n                &larr; Newer\n              </DefaultButton>\n              <DefaultButton disabled={loading} onClick={olderHandler}>\n                Older &rarr;\n              </DefaultButton>\n              {loading ? (\n                <p>Loading&hellip;</p>\n              ) : (\n                <BlockList\n                  blocks={loading ? [] : (data!.blockQuery!.blocks as NonNullable<Block[]>)}\n                />\n              )}\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </Wrapper>\n  );\n};\n\ninterface BlockListProps {\n  blocks: Pick<Block, 'hash' | 'index' | 'timestamp' | 'difficulty'>[];\n}\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks }) => {\n  const columns: IColumn[] = [\n    {\n      key: 'columnIndex',\n      name: 'Index',\n      fieldName: 'index',\n      iconName: 'NumberSymbol',\n      isIconOnly: true,\n      minWidth: 5,\n      maxWidth: 40,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n    },\n    {\n      key: 'columnHash',\n      name: 'Block Hash',\n      fieldName: 'hash',\n      minWidth: 5,\n      maxWidth: 450,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'string',\n      isPadded: true,\n      onRender: ({ hash }) => <Link href={`./block/?${hash}`}>{hash}</Link>,\n    },\n    {\n      key: 'columnTimestamp',\n      name: 'Timestamp',\n      fieldName: 'timestamp',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'coulmnMiner',\n      name: 'Miner',\n      fieldName: 'miner',\n      minWidth: 123,\n      maxWidth: 450,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'columnTimeTaken',\n      name: 'Time Taken',\n      minWidth: 50,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n      onRender: (block, index) => {\n        let beforeBlock = blocks[Math.min(index! + 1, blocks.length - 1)];\n        let beforeTimestamp = Date.parse(beforeBlock.timestamp);\n        let nowTimestamp = Date.parse(block.timestamp);\n        return <>{(nowTimestamp - beforeTimestamp) / 1000}</>;\n      },\n    },\n    {\n      key: 'columnDifficulty',\n      name: 'Difficulty',\n      minWidth: 50,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n      onRender: ({ difficulty }) => <>{difficulty}</>,\n    },\n    {\n      key: 'columnTxNumber',\n      name: 'Tx #',\n      minWidth: 5,\n      maxWidth: 20,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'number',\n      isPadded: true,\n      onRender: ({ transactions }) => <>{transactions.length}</>,\n    },\n  ];\n  return (\n    <DetailsList\n      items={blocks.slice(0, -1)}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      getKey={block => block.hash}\n      setKey=\"set\"\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      onItemInvoked={block => navigate(`/search/?${block.hash}`)}\n    />\n  );\n};\n\nexport default IndexPage;\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: any) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Address: any;\n  ByteString: any;\n  DateTimeOffset: any;\n  Date: any;\n  DateTime: any;\n  Decimal: any;\n  Milliseconds: any;\n  Seconds: any;\n};\n\nexport type Action = {\n  __typename?: 'Action';\n  arguments: Array<ActionArgumentType>;\n};\n\nexport type ActionArgumentType = {\n  __typename?: 'ActionArgumentType';\n  key: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type Block = {\n  __typename?: 'Block';\n  difficulty: Scalars['Int'];\n  hash: Scalars['ID'];\n  index: Scalars['Int'];\n  miner: Scalars['Address'];\n  nonce: Scalars['ByteString'];\n  previousBlock?: Maybe<Block>;\n  timestamp: Scalars['DateTimeOffset'];\n  transactions: Array<Transaction>;\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery';\n  block?: Maybe<Block>;\n  blocks: Array<Block>;\n};\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  blockQuery?: Maybe<BlockQuery>;\n  transactionQuery?: Maybe<TransactionQuery>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  actions: Array<Action>;\n  id: Scalars['ID'];\n  nonce: Scalars['Int'];\n  publicKey: Scalars['ByteString'];\n  signature: Scalars['ByteString'];\n  signer: Scalars['Address'];\n  timestamp: Scalars['DateTimeOffset'];\n  updatedAddresses: Array<Scalars['Address']>;\n};\n\nexport type TransactionQuery = {\n  __typename?: 'TransactionQuery';\n  transaction?: Maybe<Transaction>;\n  transactions: Array<Transaction>;\n};\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\nexport type BlockCommonFragment = { __typename?: 'Block' } & Pick<\n  Block,\n  'hash' | 'index' | 'difficulty' | 'timestamp'\n>;\n\nexport type TransactionCommonFragment = { __typename?: 'Transaction' } & Pick<\n  Transaction,\n  | 'id'\n  | 'nonce'\n  | 'publicKey'\n  | 'signature'\n  | 'signer'\n  | 'timestamp'\n  | 'updatedAddresses'\n> & {\n    actions: Array<\n      { __typename?: 'Action' } & {\n        arguments: Array<\n          { __typename?: 'ActionArgumentType' } & Pick<\n            ActionArgumentType,\n            'key' | 'value'\n          >\n        >;\n      }\n    >;\n  };\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n  excludeEmptyTxs: Scalars['Boolean'];\n};\n\nexport type BlockListQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      blocks: Array<\n        { __typename?: 'Block' } & Pick<Block, 'miner'> & {\n            transactions: Array<\n              { __typename?: 'Transaction' } & Pick<Transaction, 'id'>\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockByHashQuery = { __typename?: 'Query' } & {\n  blockQuery: Maybe<\n    { __typename?: 'BlockQuery' } & {\n      block: Maybe<\n        { __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & {\n            previousBlock: Maybe<\n              { __typename?: 'Block' } & Pick<Block, 'hash'>\n            >;\n            transactions: Array<\n              { __typename?: 'Transaction' } & TransactionCommonFragment\n            >;\n          } & BlockCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>;\n  involvedAddress?: Maybe<Scalars['Address']>;\n  desc: Scalars['Boolean'];\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n};\n\nexport type TransactionListQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionByIdQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transaction: Maybe<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress?: Maybe<Scalars['Address']>;\n};\n\nexport type TransactionsByAccountQuery = { __typename?: 'Query' } & {\n  transactionQuery: Maybe<\n    { __typename?: 'TransactionQuery' } & {\n      transactions: Array<\n        { __typename?: 'Transaction' } & TransactionCommonFragment\n      >;\n    }\n  >;\n};\nexport const BlockCommonFragmentDoc = gql`\n  fragment BlockCommon on Block {\n    hash\n    index\n    difficulty\n    timestamp\n  }\n`;\nexport const TransactionCommonFragmentDoc = gql`\n  fragment TransactionCommon on Transaction {\n    actions {\n      arguments {\n        key\n        value\n      }\n    }\n    id\n    nonce\n    publicKey\n    signature\n    signer\n    timestamp\n    updatedAddresses\n  }\n`;\nexport const BlockListDocument = gql`\n  query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!) {\n    blockQuery {\n      blocks(\n        desc: true\n        offset: $offset\n        limit: $limit\n        excludeEmptyTxs: $excludeEmptyTxs\n      ) {\n        ...BlockCommon\n        miner\n        transactions {\n          id\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListQuery,\n    BlockListQueryVariables\n  >,\n  'query'\n> &\n  ({ variables: BlockListQueryVariables; skip?: boolean } | { skip: boolean });\n\nexport const BlockListComponent = (props: BlockListComponentProps) => (\n  <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables>\n    query={BlockListDocument}\n    {...props}\n  />\n);\n\nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListQuery,\n  BlockListQueryVariables\n> &\n  TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >(BlockListDocument, {\n    alias: 'withBlockList',\n    ...operationOptions,\n  });\n}\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<\n  BlockListQuery,\n  BlockListQueryVariables\n>;\nexport const BlockByHashDocument = gql`\n  query BlockByHash($hash: ID) {\n    blockQuery {\n      block(hash: $hash) {\n        ...BlockCommon\n        miner\n        nonce\n        previousBlock {\n          hash\n        }\n        transactions {\n          ...TransactionCommon\n        }\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n  ${TransactionCommonFragmentDoc}\n`;\nexport type BlockByHashComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockByHashQuery,\n    BlockByHashQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n  <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables>\n    query={BlockByHashDocument}\n    {...props}\n  />\n);\n\nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n> &\n  TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >(BlockByHashDocument, {\n    alias: 'withBlockByHash',\n    ...operationOptions,\n  });\n}\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n>;\nexport const TransactionListDocument = gql`\n  query TransactionList(\n    $signer: Address\n    $involvedAddress: Address\n    $desc: Boolean!\n    $offset: Int!\n    $limit: Int!\n  ) {\n    transactionQuery {\n      transactions(\n        signer: $signer\n        involvedAddress: $involvedAddress\n        desc: $desc\n        offset: $offset\n        limit: $limit\n      ) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >,\n  'query'\n> &\n  (\n    | { variables: TransactionListQueryVariables; skip?: boolean }\n    | { skip: boolean });\n\nexport const TransactionListComponent = (\n  props: TransactionListComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionListQuery,\n    TransactionListQueryVariables\n  >\n    query={TransactionListDocument}\n    {...props}\n  />\n);\n\nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionListQuery,\n  TransactionListQueryVariables\n> &\n  TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionListQuery,\n    TransactionListQueryVariables,\n    TransactionListProps<TChildProps>\n  >(TransactionListDocument, {\n    alias: 'withTransactionList',\n    ...operationOptions,\n  });\n}\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<\n  TransactionListQuery,\n  TransactionListQueryVariables\n>;\nexport const TransactionByIdDocument = gql`\n  query TransactionById($id: ID) {\n    transactionQuery {\n      transaction(id: $id) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionByIdComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionByIdComponent = (\n  props: TransactionByIdComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >\n    query={TransactionByIdDocument}\n    {...props}\n  />\n);\n\nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n> &\n  TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >(TransactionByIdDocument, {\n    alias: 'withTransactionById',\n    ...operationOptions,\n  });\n}\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n>;\nexport const TransactionsByAccountDocument = gql`\n  query TransactionsByAccount($involvedAddress: Address) {\n    transactionQuery {\n      transactions(involvedAddress: $involvedAddress) {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionsByAccountComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionsByAccountComponent = (\n  props: TransactionsByAccountComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables\n  >\n    query={TransactionsByAccountDocument}\n    {...props}\n  />\n);\n\nexport type TransactionsByAccountProps<\n  TChildProps = {}\n> = ApolloReactHoc.DataProps<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n> &\n  TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionsByAccountQuery,\n    TransactionsByAccountQueryVariables,\n    TransactionsByAccountProps<TChildProps>\n  >(TransactionsByAccountDocument, {\n    alias: 'withTransactionsByAccount',\n    ...operationOptions,\n  });\n}\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables\n>;\n"],"sourceRoot":""}